#!/usr/bin/env bash
set -e

# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)

set_listen_addresses() {
    sedEscapedValue="$(echo "$1" | sed 's/[\/&]/\\&/g')"
    sed -ri "s/^#?(listen_addresses\s*=\s*)\S+/\1'$sedEscapedValue'/" "$PGDATA/postgresql.conf"
}

set_max_connections() {
    sed -i -e"s/^max_connections = 100.*$/max_connections = 1000/" "$PGDATA/postgresql.conf"
}

enable_pg_stat_statements() {
    echo "shared_preload_libraries = 'pg_stat_statements'" >> $PGDATA/postgresql.conf
    echo "pg_stat_statements.max = 10000" >> $PGDATA/postgresql.conf
    echo "pg_stat_statements.track = all" >> $PGDATA/postgresql.conf
}

file_env() {
	local var="$1"
	local fileVar="${var}_FILE"
	local def="${2:-}"
	if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
		echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
		exit 1
	fi
	local val="$def"
	if [ "${!var:-}" ]; then
		val="${!var}"
	elif [ "${!fileVar:-}" ]; then
		val="$(< "${!fileVar}")"
	fi
	export "$var"="$val"
	unset "$fileVar"
}

if [ $# -eq 1 ]; then
	# if `docker run` only has one arguments, we assume user is running alternate command like `bash` to inspect the image
	exec "$@"
else
	# if -tunnel is not provided try env vars
	case "$@" in
		*"-tunnel "*) ;;
		*)
		if [ ! -z "$JENKINS_TUNNEL" ]; then
			TUNNEL="-tunnel $JENKINS_TUNNEL"
		fi ;;
	esac

	# if -workDir is not provided try env vars
	if [ ! -z "$JENKINS_AGENT_WORKDIR" ]; then
		case "$@" in
			*"-workDir"*) echo "Warning: Work directory is defined twice in command-line arguments and the environment variable" ;;
			*)
			WORKDIR="-workDir $JENKINS_AGENT_WORKDIR" ;;
		esac
	fi

	if [ -n "$JENKINS_URL" ]; then
		URL="-url $JENKINS_URL"
	fi

	if [ -n "$JENKINS_NAME" ]; then
		JENKINS_AGENT_NAME="$JENKINS_NAME"
	fi  

	if [ -z "$JNLP_PROTOCOL_OPTS" ]; then
		echo "Warning: JnlpProtocol3 is disabled by default, use JNLP_PROTOCOL_OPTS to alter the behavior"
		JNLP_PROTOCOL_OPTS="-Dorg.jenkinsci.remoting.engine.JnlpProtocol3.disabled=true"
	fi

	# If both required options are defined, do not pass the parameters
	OPT_JENKINS_SECRET=""
	if [ -n "$JENKINS_SECRET" ]; then
		case "$@" in
			*"${JENKINS_SECRET}"*) echo "Warning: SECRET is defined twice in command-line arguments and the environment variable" ;;
			*)
			OPT_JENKINS_SECRET="${JENKINS_SECRET}" ;;
		esac
	fi

	OPT_JENKINS_AGENT_NAME=""
	if [ -n "$JENKINS_AGENT_NAME" ]; then
		case "$@" in
			*"${JENKINS_AGENT_NAME}"*) echo "Warning: AGENT_NAME is defined twice in command-line arguments and the environment variable" ;;
			*)
			OPT_JENKINS_AGENT_NAME="${JENKINS_AGENT_NAME}" ;;
		esac
	fi


    if [ ! -d  "$PGDATA" ]; then
        mkdir -p "$PGDATA"
        chmod 700 "$PGDATA"
        chown -R postgres "$PGDATA"
    fi

    chmod 700 "$PGDATA"
    chown -R postgres "$PGDATA"

    #chmod g+s /run/postgresql
    #chown -R postgres /run/postgresql

    # look specifically for PG_VERSION, as it is expected in the DB dir
    if [ ! -s "$PGDATA/PG_VERSION" ]; then
        gosu postgres initdb

        # check password first so we can output the warning before postgres
        # messes it up
        if [ "$POSTGRES_PASSWORD" ]; then
            pass="PASSWORD '$POSTGRES_PASSWORD'"
            authMethod=md5
        else
            # The - option suppresses leading tabs but *not* spaces. :)
            cat >&2 <<-'EOWARN'
                ****************************************************
                WARNING: No password has been set for the database.
                         This will allow anyone with access to the
                         Postgres port to access your database. In
                         Docker's default configuration, this is
                         effectively any other container on the same
                         system.

                         Use "-e POSTGRES_PASSWORD=password" to set
                         it in "docker run".
                ****************************************************
EOWARN

            pass=
            authMethod=trust
        fi

        { echo; echo "host all all 0.0.0.0/0 $authMethod"; } >> "$PGDATA/pg_hba.conf"

        # internal start of server in order to allow set-up using psql-client
        # does not listen on TCP/IP and waits until start finishes
        gosu postgres pg_ctl -D "$PGDATA" \
            -o "-c listen_addresses=''" \
            -w start

        : ${POSTGRES_USER:=postgres}
        : ${POSTGRES_DATABASES:=$POSTGRES_USER}
        export POSTGRES_USER POSTGRES_DATABASES
        for DB in $POSTGRES_DATABASES
            do
            if [ "$DB" != 'postgres' ]; then
                psql --username postgres <<-EOSQL
                    CREATE DATABASE "$DB" ;
EOSQL
                echo
            fi
        done

        if [ "$POSTGRES_USER" = 'postgres' ]; then
            op='ALTER'
        else
            op='CREATE'
        fi

        psql --username postgres <<-EOSQL
            $op USER "$POSTGRES_USER" WITH SUPERUSER $pass ;
EOSQL

        echo

        #gosu postgres pg_ctl -D "$PGDATA" -m fast -w start
        set_listen_addresses '*'
		set_max_connections
        enable_pg_stat_statements

        echo
        echo 'PostgreSQL init process complete; ready for start up.'
        echo
    fi
    
	## Jenkins stuff
	exec java $JAVA_OPTS $JNLP_PROTOCOL_OPTS -cp /usr/share/jenkins/slave.jar hudson.remoting.jnlp.Main -headless $TUNNEL $URL $WORKDIR $OPT_JENKINS_SECRET $OPT_JENKINS_AGENT_NAME "$@"
fi